# Configuration du serveur
# Définit le port et le comportement d'arrêt de l'API Gateway.
server:
  port: 8989 # Port sur lequel l'API Gateway s'exécute
  shutdown: graceful # Assure un arrêt progressif pour éviter d'interrompre les requêtes en cours

# Configuration de la gestion (Spring Boot Actuator)
# Configure les endpoints Actuator pour le monitoring et les vérifications de santé.
management:
  endpoints:
    web:
      exposure:
        include: "*" # Expose tous les endpoints Actuator (ex. /actuator/health, /actuator/metrics)
  endpoint:
    health:
      show-details: always # Affiche des informations détaillées sur l'état de santé (ex. base de données, espace disque)

# Configuration de l'application Spring
spring:
  application:
    name: api-gateway # Nom de l'application
  mvc:
    problemdetails:
      enabled: true # Active le format RFC 7807 pour les détails des erreurs dans les réponses
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false # Désactive la découverte de services (car Eureka n'est pas utilisé)
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins: "http://localhost:3000" # Restreint le CORS à ton front-end (ex. une application React)
            allowed-methods: "*" # Autorise toutes les méthodes HTTP (GET, POST, etc.)
            allowed-headers: "*" # Autorise tous les en-têtes
            allow-credentials: false # Désactive les credentials (cookies, auth) pour des raisons de sécurité
      routes:
        # Route pour catalogue_service
        - id: catalogue-service
          uri: ${CATALOGUE_SERVICE_URL:http://localhost:8081} # URL fixe car la découverte de services n'est pas utilisée
          predicates:
            - Path=/catalogue/** # Correspond aux requêtes commençant par /api/produits
          filters:
            - RewritePath=/catalogue/(?<segment>.*), /${segment} # Réécrit le chemin (ex. /api/produits/123 -> /123)
        # Route pour commande_service
        - id: commande-service
          uri: ${COMMANDE_SERVICE_URL:http://localhost:8082} # URL corrigée (suppression du double ::)
          predicates:
            - Path=/commande/** # Correspond aux requêtes commençant par /api/commande
          filters:
            - RewritePath=/commande/(?<segment>.*), /${segment} # Réécrit le chemin
        # Route pour la documentation Swagger/OpenAPI
        - id: openapi
          uri: http://localhost:${server.port} # Redirige vers l'API Gateway lui-même
          predicates:
            - Path=/v3/api-docs/** # Correspond aux requêtes pour la documentation API
          filters:
            - RewritePath=/v3/api-docs/(?<segment>.*), /${segment}/v3/api-docs # Réécrit le chemin pour Swagger
  sleuth:
    sampler:
      probability: 1.0 # Active le traçage distribué pour 100% des requêtes

# Configuration de Springdoc Swagger UI
# Configure Swagger UI pour la documentation des API des microservices.
springdoc:
  swagger-ui:
    use-root-path: true # Corrigé de user-root-path; active Swagger UI à la racine
    urls:
      - name: catalogue
        url: /v3/api-docs/catalogue # Documentation pour catalogue_service
      - name: commande
        url: /v3/api-docs/commande # Documentation pour commande_service
      - name: notification
        url: /v3/api-docs/notifications # Documentation pour notification_service

# Configuration des logs
# Ajoute les identifiants de traçage (traceId, spanId) dans les logs pour le traçage distribué.
logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId}/%X{spanId}] %-5level %logger{36} - %msg%n"